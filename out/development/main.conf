name: DU-myscript main
slots: {}
handlers:
  library:
    onStart():
      lua: >-
        ;(function()

        local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

        end)()

        ;(function()

        local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

        end)()

        package.preload['DU-myscript:globals.lua']=(function()

        -- Initialize globals and constants

        Config = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }

        DEBUG = false

        INGAME = system ~= nil


        if not INGAME then

            function traceback(o)
                if o then P(tostring(o)) end
            end
        else
            --require 'mockfuncs'
            print=system.print
        end

        P=print

        end)

        package.preload['DU-myscript:startup.lua']=(function()

        -- startup for initial slots detection depending on Config flags

        local status, err=false,nil

        if INGAME then
            ---@diagnostic disable-next-line: undefined-global
            -- Using DU-LuaC's automatic link detection code
            status, err, _ = xpcall(function()
                if Config.c_required then
                    Config.core = library.getCoreUnit()
                end
                if Config.db_required then
                    Config.databanks = library.getLinksByClass('DataBank', true) -- true is important!
                end
                if Config.s_required then
                    Config.screens = library.getLinksByClass('Screen', true)
                end
            end, traceback)
            if not status then
                P("[E] Error in Link Detection:\n" .. err)
                unit.exit()
                return
            end
        else
            -- use mocks (not included in this repo!)
            Config.core = unit.core
            Config.databanks =  { unit.databank }
            Config.screens =  { unit.screen }
        end


        if #Config.databanks > 0 then
            local plural = ""
            if #Config.databanks > 1 then plural = "s" else plural = " '"..Config.databanks[1].getName().."'" end
            P("[I] "..#Config.databanks .. " databank" .. plural .. " connected.")
        else
            if Config.db_required then
                P("[E] No databank found!")
                unit.exit()
                return
            end
        end

        if #Config.screens > 0 then
            local plural = ""
            if #Config.screens > 1 then plural = "s" end
            P("[I] "..#Config.screens .. " screen" .. plural .. " connected.")
        else
            if Config.s_required then
                P("[E] No screen found!")
                unit.exit()
                return
            end
        end

        end)

        package.preload['DU-myscript:common-library.lua']=(function()

        -- some global sample functions for strings

        -- use at your own risk :)

        function EndsWith(s, suffix)
            if not s or not suffix then return false end
            return string.sub(s, -#suffix) == suffix
        end


        function Rtrim(s)
            local res, _ = string.gsub(s, "%s+$", "")
            return res
        end


        function RtrimChar(s,char)
            if not s or not char then return s end
            while #s > 0 and EndsWith(s, char) do
                s = string.sub(s,1,#s - #char)
            end
            return s
        end


        function DumpTable(o)
           -- omitt any spaces in s!
           if type(o) == 'table' then
              local s = '{'
              for k,v in pairs(o) do
                 if type(k) ~= 'number' then k = '"'..k..'"' end
                 s = s .. '['..k..']=' .. DumpTable(v) .. ','
              end
              s = RtrimChar(s,",")
              return s .. '}'
           else
              return tostring(o)
           end
        end


        end)

        package.preload['DU-myscript:main-sys_onInputText.lua']=(function()

        -- Put any code to process user input (content of "text" parameter)

        -- within the "Run" function.

        local inputTextFunc = {}


        function inputTextFunc.Run(text)
            system.print("You wrote: "..text)
        end


        return inputTextFunc

        end)

        package.preload['DU-myscript:main-onStart.lua']=(function()

        -- Main LUA code. Assumes Databank and Screen were already assigned!

        -- "P" is a shortcut for print command

        P("Hello world!")

        if DEBUG then
            P("[I] Debug mode is enabled.")
        end

        end)

        library.addEventHandlers(library)

        library.addEventHandlers(system)

        library.addEventHandlers(player)

        library.addEventHandlers(construct)

        library.addEventHandlers(unit)
  system:
    onActionStart(action):
      lua: system:triggerEvent('onActionStart',action)
    onActionLoop(action):
      lua: system:triggerEvent('onActionLoop',action)
    onActionStop(action):
      lua: system:triggerEvent('onActionStop',action)
    onUpdate():
      lua: system:triggerEvent('onUpdate')
    onFlush():
      lua: system:triggerEvent('onFlush')
    onInputText(text):
      lua: system:triggerEvent('onInputText',text)
    onCameraChanged(mode):
      lua: system:triggerEvent('onCameraChanged',mode)
  player:
    "onParentChanged(oldId,newId)":
      lua: player:triggerEvent('onParentChanged',oldId,newId)
  construct:
    onDocked(id):
      lua: construct:triggerEvent('onDocked',id)
    onUndocked(id):
      lua: construct:triggerEvent('onUndocked',id)
    onPlayerBoarded(id):
      lua: construct:triggerEvent('onPlayerBoarded',id)
    onVRStationEntered(id):
      lua: construct:triggerEvent('onVRStationEntered',id)
    onConstructDocked(id):
      lua: construct:triggerEvent('onConstructDocked',id)
    onPvPTimer(active):
      lua: construct:triggerEvent('onPvPTimer',active)
  unit:
    onStop():
      lua: unit:triggerEvent('onStop')
    onTimer(timerId):
      lua: unit:triggerEvent('onTimer',timerId)
    onStart():
      lua: >-
        -- DU-LuaC template with dynamic slot detection by tobitege


        -- This script is drafted to have this project entry point load most

        -- required code parts via xpcall's for error handling.

        -- Generally speaking such parts can be:

        --  * globals -> as the name suggests ;)

        --  * startup -> runs link detection and sets global Config variable

        --  * library -> any shared, independent objects and functions

        --  * events -> DU-LuaC assignment of code to specific element's events

        --  * main -> the actual main code of this project


        -- First some setup code to allow debugging in VSCode.

        -- These 2 lines do not interfere ingame but allow the use

        -- of debuggers running the script outside of the game.

        ---@diagnostic disable: param-type-mismatch

        package.path = "lua/?.lua;util/?.lua;"..package.path


        -- File with commonly shared, independent global constants and switches etc.

        -- This is for use across multiple project entry points and most importantly

        -- defines a "Config" global variable (see below)

        require('DU-myscript:globals.lua')


        -- "startup" has all the Config setup with links detection.

        -- By default config requires links to core, a screen and a databank.

        -- Here we choose to not require a core link for demonstration:

        Config.core_required = false

        local status, err, _ = xpcall(function() require('DU-myscript:startup.lua') end, traceback)

        if not status then
            P("[E] Error in startup!")
            if err then P(err) end
            unit.exit()
            return
        end


        -- Example: we could check that exactly 2 databanks were (linked and) detected:

        -- if #Config.databanks ~= 2 then

        --     P("[E] 2 databanks must be linked!")

        --     unit.exit()

        --     return

        -- end


        -- Using global variables (uppercase 1st letter) for common objects.

        -- We choose to use the first databank and screen (could by mistake have more linked)

        -- Comment out/remove any line if no databank or screen is required.

        Databank = Config.databanks[1]

        Screen = Config.screens[1]


        -- The "common-library" could contain commonly shared functions

        -- for use across multiple project entries

        -- Remove or replace as needed!

        status, err, _ = xpcall(function() require('DU-myscript:common-library.lua') end, traceback)

        if not status then
            P("[E] Error in common-library!")
            if err then P(err) end
            unit.exit()
            return
        end


        -- Event example: attaching a function to the system.onInputText() event at runtime.

        -- Instead of using inline code right here, it is in a separate file

        -- to return a table with a "Run" method declaration (name can be anything)

        -- and a single parameter ("text" is the actual LUA chat input then).

        local inpEvent = require('DU-myscript:main-sys_onInputText.lua')

        if inpEvent ~= nil then
            -- important: event names start lowercase!
            system:onEvent('onInputText', function (self, text) inpEvent.Run(text) end)
        end


        -- Require the main script's code and in case of error, stop the board

        status, err, _ = xpcall(function() require('DU-myscript:main-onStart.lua') end, traceback)

        if not status then
            P("[E] Error in main-onStart!")
            if err then P(err) end
            unit.exit()
        end


        -- Any additional code can be placed here

        P("Script finished.")


        -- Optionally hide the programming board widget

        --unit.hideWidget()


        -- Optionally end the script now

        unit.exit()
