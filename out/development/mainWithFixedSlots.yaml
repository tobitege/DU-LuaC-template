slots:
  "0":
    name: MyScreen
    class: ScreenUnit
    select: null
    type:
      events: []
      methods: []
  "1":
    name: MyDB
    class: DataBankUnit
    select: null
    type:
      events: []
      methods: []
  "-5":
    name: library
    class: null
    select: null
    type:
      events: []
      methods: []
  "-4":
    name: system
    class: null
    select: null
    type:
      events: []
      methods: []
  "-3":
    name: player
    class: null
    select: null
    type:
      events: []
      methods: []
  "-2":
    name: construct
    class: null
    select: null
    type:
      events: []
      methods: []
  "-1":
    name: unit
    class: null
    select: null
    type:
      events: []
      methods: []
handlers:
  - key: 1
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      ;(function()

      local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

      end)()
  - key: 2
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      ;(function()

      local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

      end)()
  - key: 3
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: >-
      package.preload['DU-myscript:globals.lua']=(function()

      -- Initialize globals and constants

      Config = { core = nil, c_required=true, databanks = {}, db_required=true, screens = {}, s_required=true }

      DEBUG = false

      INGAME = system ~= nil


      if not INGAME then

          function traceback(o)
              if o then P(tostring(o)) end
          end
      else
          --require 'mockfuncs'
          print=system.print
      end

      P=print

      end)

      package.preload['DU-myscript:common-library.lua']=(function()

      -- some global sample functions for strings

      -- use at your own risk :)

      function EndsWith(s, suffix)
          if not s or not suffix then return false end
          return string.sub(s, -#suffix) == suffix
      end


      function Rtrim(s)
          local res, _ = string.gsub(s, "%s+$", "")
          return res
      end


      function RtrimChar(s,char)
          if not s or not char then return s end
          while #s > 0 and EndsWith(s, char) do
              s = string.sub(s,1,#s - #char)
          end
          return s
      end


      function DumpTable(o)
         -- omitt any spaces in s!
         if type(o) == 'table' then
            local s = '{'
            for k,v in pairs(o) do
               if type(k) ~= 'number' then k = '"'..k..'"' end
               s = s .. '['..k..']=' .. DumpTable(v) .. ','
            end
            s = RtrimChar(s,",")
            return s .. '}'
         else
            return tostring(o)
         end
      end


      end)

      package.preload['DU-myscript:main-screen.onOutputChanged.lua']=(function()

      -- Example of how a screen event (or any other event that passes 1 parameter)

      -- could look like.

      -- Function name can be different from "Run", but must be renamed

      -- in main lua file accordingly!


      -- This code is non-functional demo code, it does not work right now

      -- as this repo doesn't include a RenderScript script for the screen

      -- to actually communicate with!

      local outputChanged = {}

      function outputChanged.Run(output)
          -- Hint: in regular script we'd use like Screen.getScriptOutput()
          -- But how the events work, we get that passed in via "output"
          local screenoutput = output
          local screeninput = ""
          -- react to what the screen sent back
          if screenoutput == "" then
              screeninput = "?"
          elseif screenoutput == "TESTME" then
              -- do something
              P("Testme received")
          end
          Screen.setScriptInput(screeninput)
          Screen.clearScriptOutput()
          if DEBUG then
              P("* OUT: "..screenoutput)
              P("* IN: ".. screeninput)
          end
      end

      return outputChanged

      end)

      package.preload['DU-myscript:main-onStart.lua']=(function()

      -- Main LUA code. Assumes Databank and Screen were already assigned!

      -- "P" is a shortcut for print command

      P("Hello world!")

      if DEBUG then
          P("[I] Debug mode is enabled.")
      end

      end)
  - key: 4
    filter:
      slotKey: -5
      signature: onStart()
      args: []
    code: |-
      library.addEventHandlers(library)
      library.addEventHandlers(system)
      library.addEventHandlers(player)
      library.addEventHandlers(construct)
      library.addEventHandlers(unit)
      library.addEventHandlers(MyScreen)
      library.addEventHandlers(MyDB)
  - key: 5
    filter:
      slotKey: -4
      signature: onActionStart(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionStart',action)
  - key: 6
    filter:
      slotKey: -4
      signature: onActionLoop(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionLoop',action)
  - key: 7
    filter:
      slotKey: -4
      signature: onActionStop(action)
      args:
        - variable: "*"
    code: system:triggerEvent('onActionStop',action)
  - key: 8
    filter:
      slotKey: -4
      signature: onUpdate()
      args: []
    code: system:triggerEvent('onUpdate')
  - key: 9
    filter:
      slotKey: -4
      signature: onFlush()
      args: []
    code: system:triggerEvent('onFlush')
  - key: 10
    filter:
      slotKey: -4
      signature: onInputText(text)
      args:
        - variable: "*"
    code: system:triggerEvent('onInputText',text)
  - key: 11
    filter:
      slotKey: -4
      signature: onCameraChanged(mode)
      args:
        - variable: "*"
    code: system:triggerEvent('onCameraChanged',mode)
  - key: 12
    filter:
      slotKey: -3
      signature: onParentChanged(oldId,newId)
      args:
        - variable: "*"
        - variable: "*"
    code: player:triggerEvent('onParentChanged',oldId,newId)
  - key: 13
    filter:
      slotKey: -2
      signature: onDocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onDocked',id)
  - key: 14
    filter:
      slotKey: -2
      signature: onUndocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onUndocked',id)
  - key: 15
    filter:
      slotKey: -2
      signature: onPlayerBoarded(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onPlayerBoarded',id)
  - key: 16
    filter:
      slotKey: -2
      signature: onVRStationEntered(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onVRStationEntered',id)
  - key: 17
    filter:
      slotKey: -2
      signature: onConstructDocked(id)
      args:
        - variable: "*"
    code: construct:triggerEvent('onConstructDocked',id)
  - key: 18
    filter:
      slotKey: -2
      signature: onPvPTimer(active)
      args:
        - variable: "*"
    code: construct:triggerEvent('onPvPTimer',active)
  - key: 19
    filter:
      slotKey: -1
      signature: onStop()
      args: []
    code: unit:triggerEvent('onStop')
  - key: 20
    filter:
      slotKey: -1
      signature: onTimer(timerId)
      args:
        - variable: "*"
    code: unit:triggerEvent('onTimer',timerId)
  - key: 21
    filter:
      slotKey: 0
      signature: onMouseDown(x,y)
      args:
        - variable: "*"
        - variable: "*"
    code: MyScreen:triggerEvent('onMouseDown',x,y)
  - key: 22
    filter:
      slotKey: 0
      signature: onMouseUp(x,y)
      args:
        - variable: "*"
        - variable: "*"
    code: MyScreen:triggerEvent('onMouseUp',x,y)
  - key: 23
    filter:
      slotKey: 0
      signature: onOutputChanged(output)
      args:
        - variable: "*"
    code: MyScreen:triggerEvent('onOutputChanged',output)
  - key: 24
    filter:
      slotKey: -1
      signature: onStart()
      args: []
    code: >-
      

      -- DU-LuaC template with fixed slots by tobitege

      -- Script requires screen and databank to be linked in this fixed order!!!


      -- This script is drafted to have this project entry point load most

      -- required code parts via xpcall's for error handling.

      -- Generally speaking such parts can be:

      --  * globals -> as the name suggests ;)

      --  * startup -> not used in this entry point!

      --  * library -> any shared, independent objects and functions

      --  * events -> DU-LuaC assignment of code to specific element's events

      --  * main -> the actual main code of this project


      -- First some setup code to allow debugging in VSCode.

      -- These 2 lines do not interfere ingame but allow the use

      -- of debuggers running the script outside of the game.

      ---@diagnostic disable: param-type-mismatch

      package.path = "lua/?.lua;util/?.lua;"..package.path


      -- File with commonly shared, independent global constants and switches etc.

      -- This is for use across multiple project entry points.

      require('DU-myscript:globals.lua')


      -- Compared to the "main.lua" script, we don't use the "startup" file 

      -- here since slots are fixed and named!


      -- Since the project file specifies named slots, we now must

      -- check for "MyScreen" and "MyDB" to actually exist or error out:

      if not MyScreen or not MyDB then
          P("[E] First link screen, then databank!")
          unit.exit()
          return
      end


      -- The "common-library" could contain commonly shared functions

      -- for use across multiple project entries.

      -- Remove or replace as needed!

      local status, err, _ = xpcall(function() require('DU-myscript:common-library.lua') end, traceback)

      if not status then
          P("[E] Error in common-library!")
          if err then P(err) end
          unit.exit()
          return
      end


      -- Event example: attach code to the screen's onOutputChanged event.

      -- This assumes the code in the file to return a table with a Run function

      -- and 1 parameter (here "output" is coming from the screen)!

      -- This ONLY works with the screen being a fixed slot in the project file

      -- as otherwise DU-LuaC won't be able to add its event handler code

      -- in the corresponding LUA section!

      local screenEvent = require('DU-myscript:main-screen.onOutputChanged.lua')

      if screenEvent ~= nil then
          -- important: event names start lowercase!
          MyScreen:onEvent('onOutputChanged', function (self, output) screenEvent.Run(output) end)
      end


      -- Require the main script's code and in case of error, stop the board

      status, err, _ = xpcall(function() require('DU-myscript:main-onStart.lua') end, traceback)

      if not status then
          P("[E] Error in main-onStart!")
          if err then P(err) end
          unit.exit()
      end


      -- Any additional code can be placed here

      P("Script finished.")


      -- Optionally hide the programming board widget

      --unit.hideWidget()


      -- Optionally end the script now

      unit.exit()
events: []
methods: []
