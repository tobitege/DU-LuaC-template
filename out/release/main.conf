name: DU-myscript main
slots: {}
handlers:
  library:
    onStart():
      lua: >-
        ;(function()

        local a={}local b=0;function library.addEventHandlers(c)if not c or c.onEvent and c.triggerEvent then return false end;b=b+1;a[b]=c;local d,e,f='table','function','thread'if d~=type(c)then error('You can only add event handlers to table objects!')end;local g={}local function h(c)local i=type(c)return e==i or d==i and h(getmetatable(c).__call)or f==i end;c.onEvent=function(self,j,k,l)if not h(k)then error('Event handler must be a function, a callable object or a thread!')end;l=l or self;if d~=type(l)then error('The value of self must be a table!')end;if not g[j]then g[j]={_=0}end;local m=f==type(k)and function(...)coroutine.resume(k,...)end or k;local k=g[j]local n=k._+1;k[n]={m,l}k._=n;return n end;c.clearEvent=function(self,j,o)if g[j]and g[j][o]then g[j][o]=nil end end;c.clearAllEvents=function(self)g={}end;c.triggerEvent=function(self,j,...)local p=g[j]if p then for q=1,p._ do local k=p[q]if k then k[1](k[2],...)end end end end;return true end;function library.clearAllEventHandlers()for q=1,b do local c=a[q]if c and c.clearAllEvents then c:clearAllEvents()end end end

        end)()

        ;(function()

        local a=DULibrary or{}function a.getLinks(b,c)local d={}if not b then b={}end;for e,f in pairs(unit.getOutPlugs())do local g=unit[f.name]if'table'==type(g)and'function'==type(g.getClass)then local h=true;for i,j in pairs(b)do if not('function'==type(g[i])and j==g[i]():sub(1,#j))then h=false;break end end;if h then if c then table.insert(d,g)else d[f.name]=g end end end end;return d end;function a.getLinksByClass(k,c)return a.getLinks({getClass=k},c)end;function a.getLinkByClass(k)return a.getLinksByClass(k,true)[1]end;function a.getCoreUnit()return a.getLinkByClass('CoreUnit')end;function a.getLinkByName(l)local m=a.getCoreUnit()if not m then error('getLinkByName requires a linked CoreUnit to work')end;local d=a.getLinks()for n,o in pairs(d)do if l==m.getElementNameById(o.getLocalId())then return o end end end

        end)()

        package.preload['DU-myscript:globals.lua']=(function()

        Config={core=nil,c_required=true,databanks={},db_required=true,screens={},s_required=true}DEBUG=false;INGAME=system~=nil;if not INGAME then function traceback(a)if a then P(tostring(a))end end else print=system.print end;P=print

        end)

        package.preload['DU-myscript:startup.lua']=(function()

        local a,b=false,nil;if INGAME then a,b,_=xpcall(function()if Config.c_required then Config.core=library.getCoreUnit()end;if Config.db_required then Config.databanks=library.getLinksByClass('DataBank',true)end;if Config.s_required then Config.screens=library.getLinksByClass('Screen',true)end end,traceback)if not a then P("[E] Error in Link Detection:\n"..b)unit.exit()return end else Config.core=unit.core;Config.databanks={unit.databank}Config.screens={unit.screen}end;if#Config.databanks>0 then local c=""if#Config.databanks>1 then c="s"else c=" '"..Config.databanks[1].getName().."'"end;P("[I] "..#Config.databanks.." databank"..c.." connected.")else if Config.db_required then P("[E] No databank found!")unit.exit()return end end;if#Config.screens>0 then local c=""if#Config.screens>1 then c="s"end;P("[I] "..#Config.screens.." screen"..c.." connected.")else if Config.s_required then P("[E] No screen found!")unit.exit()return end end

        end)

        package.preload['DU-myscript:common-library.lua']=(function()

        function EndsWith(a,b)if not a or not b then return false end;return string.sub(a,-#b)==b end;function Rtrim(a)local c,d=string.gsub(a,"%s+$","")return c end;function RtrimChar(a,e)if not a or not e then return a end;while#a>0 and EndsWith(a,e)do a=string.sub(a,1,#a-#e)end;return a end;function DumpTable(f)if type(f)=='table'then local a='{'for g,h in pairs(f)do if type(g)~='number'then g='"'..g..'"'end;a=a..'['..g..']='..DumpTable(h)..','end;a=RtrimChar(a,",")return a..'}'else return tostring(f)end end

        end)

        package.preload['DU-myscript:main-sys_onInputText.lua']=(function()

        local a={}function a.Run(b)system.print("You wrote: "..b)end;return a

        end)

        package.preload['DU-myscript:main-onStart.lua']=(function()

        P("Hello world!")if DEBUG then P("[I] Debug mode is enabled.")end

        end)

        library.addEventHandlers(library)

        library.addEventHandlers(system)

        library.addEventHandlers(player)

        library.addEventHandlers(construct)

        library.addEventHandlers(unit)
  system:
    onActionStart(action):
      lua: system:triggerEvent('onActionStart',action)
    onActionLoop(action):
      lua: system:triggerEvent('onActionLoop',action)
    onActionStop(action):
      lua: system:triggerEvent('onActionStop',action)
    onUpdate():
      lua: system:triggerEvent('onUpdate')
    onFlush():
      lua: system:triggerEvent('onFlush')
    onInputText(text):
      lua: system:triggerEvent('onInputText',text)
    onCameraChanged(mode):
      lua: system:triggerEvent('onCameraChanged',mode)
  player:
    "onParentChanged(oldId,newId)":
      lua: player:triggerEvent('onParentChanged',oldId,newId)
  construct:
    onDocked(id):
      lua: construct:triggerEvent('onDocked',id)
    onUndocked(id):
      lua: construct:triggerEvent('onUndocked',id)
    onPlayerBoarded(id):
      lua: construct:triggerEvent('onPlayerBoarded',id)
    onVRStationEntered(id):
      lua: construct:triggerEvent('onVRStationEntered',id)
    onConstructDocked(id):
      lua: construct:triggerEvent('onConstructDocked',id)
    onPvPTimer(active):
      lua: construct:triggerEvent('onPvPTimer',active)
  unit:
    onStop():
      lua: unit:triggerEvent('onStop')
    onTimer(timerId):
      lua: unit:triggerEvent('onTimer',timerId)
    onStart():
      lua: package.path="lua/?.lua;util/?.lua;"..package.path;require('DU-myscript:globals.lua')Config.core_required=false;local
        a,b,c=xpcall(function()require('DU-myscript:startup.lua')end,traceback)if
        not a then P("[E] Error in startup!")if b then P(b)end;unit.exit()return
        end;Databank=Config.databanks[1]Screen=Config.screens[1]a,b,c=xpcall(function()require('DU-myscript:common-library.lua')end,traceback)if
        not a then P("[E] Error in common-library!")if b then
        P(b)end;unit.exit()return end;local
        d=require('DU-myscript:main-sys_onInputText.lua')if d~=nil then
        system:onEvent('onInputText',function(self,e)d.Run(e)end)end;a,b,c=xpcall(function()require('DU-myscript:main-onStart.lua')end,traceback)if
        not a then P("[E] Error in main-onStart!")if b then
        P(b)end;unit.exit()end;P("Script finished.")unit.exit()
